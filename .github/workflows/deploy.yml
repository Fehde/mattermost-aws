name: Build and deploy Docker app to Lightsail
on:
  push:
    branches:
      - main
env:
  AWS_REGION: ap-northeast-1
  AWS_LIGHTSAIL_SERVICE_NAME: container-service-limited-20221031
jobs:
  deploy:
    name: Build and deploy
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip
      - name: Install AWS Client and LightsailControl Plugin
        run: |
          curl https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
          unzip awscliv2.zip
          sudo ./aws/install || true
          aws --version
          curl https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl -o lightsailctl
          sudo mv lightsailctl /usr/local/bin/lightsailctl
          sudo chmod +x /usr/local/bin/lightsailctl
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Pull and Build Docker Image
        run: |
          docker pull dpage/pgadmin4
          docker pull mattermost/mattermost-enterprise-edition:7.1.2
          docker pull nginx
          docker compose build
          docker image ls
      - name: Delete Image
        run: |
          service_name=${{ env.AWS_LIGHTSAIL_SERVICE_NAME }}
          aws lightsail get-container-images --service-name ${service_name} | jq -r --raw-output '.containerImages[] | .image' > image.txt
          while read line; do aws lightsail delete-container-image --image $line --service-name ${service_name}; done < image.txt
      - name: Push Image
        run: |
          service_name=${{ env.AWS_LIGHTSAIL_SERVICE_NAME }}
          aws lightsail push-container-image \
            --region ${{ env.AWS_REGION }} \
            --service-name ${service_name} \
            --label mmapp-db \
            --image mmapp-db
          aws lightsail push-container-image \
            --region ${{ env.AWS_REGION }} \
            --service-name ${service_name} \
            --label pgadmin \
            --image dpage/pgadmin4
          aws lightsail push-container-image \
            --region ${{ env.AWS_REGION }} \
            --service-name ${service_name} \
            --label mattermost \
            --image mattermost/mattermost-enterprise-edition:7.1.2
          aws lightsail push-container-image \
            --region ${{ env.AWS_REGION }} \
            --service-name ${service_name} \
            --label nginx \
            --image nginx
      - name: Confirm Image
        run: |
          aws lightsail get-container-images --service-name ${{ env.AWS_LIGHTSAIL_SERVICE_NAME }}
      - name: Deploy
        run: |
          export $(cat .env | grep -v ^#)
          echo $MM_SQLSETTINGS_DATASOURCE
          service_name=${{ env.AWS_LIGHTSAIL_SERVICE_NAME }}
          aws lightsail get-container-images --service-name ${service_name} | jq --raw-output '.containerImages[] | select(.image | contains("mmapp-db")) | .image' > db_image.txt
          cat db_image.txt
          aws lightsail get-container-images --service-name ${service_name} | jq --raw-output '.containerImages[] | select(.image | contains("mattermost")) | .image' > mm_image.txt
          cat mm_image.txt
          jq --arg db_image $(cat db_image.txt) --arg mm_image $(cat mm_image.txt) '.containers.db.image='$db_image container.template.json > container.json
          cat container.json
          aws lightsail create-container-service-deployment --service-name ${service_name} --cli-input-json file://$(pwd)/container.json
